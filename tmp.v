/* Generated by Yosys 0.22+57 (git sha1 518194fac, clang 14.0.0 -fPIC -Os) */

(* hdlname = "\\top" *)
(* top =  1  *)
(* src = "adder-fa.v:29.1-79.10" *)
module top(a0, a1, a2, a3, a4, a5, a6, a7, b0, b1, b2, b3, b4, b5, b6, b7, c0, s0, s1, s2, s3
, s4, s5, s6, s7, s8);
  input a0;
  wire a0;
  input a1;
  wire a1;
  input a2;
  wire a2;
  input a3;
  wire a3;
  input a4;
  wire a4;
  input a5;
  wire a5;
  input a6;
  wire a6;
  input a7;
  wire a7;
  input b0;
  wire b0;
  input b1;
  wire b1;
  input b2;
  wire b2;
  input b3;
  wire b3;
  input b4;
  wire b4;
  input b5;
  wire b5;
  input b6;
  wire b6;
  input b7;
  wire b7;
  input c0;
  wire c0;
  wire c1;
  wire c2;
  wire c3;
  wire c4;
  wire c5;
  wire c6;
  wire c7;
  wire c8;
  (* hdlname = "fa0 A" *)
  wire \fa0.A ;
  (* hdlname = "fa0 B" *)
  wire \fa0.B ;
  (* hdlname = "fa0 Cin" *)
  wire \fa0.Cin ;
  (* hdlname = "fa0 Cout" *)
  wire \fa0.Cout ;
  (* hdlname = "fa0 S" *)
  wire \fa0.S ;
  (* hdlname = "fa0 or_add" *)
  wire \fa0.or_add ;
  (* hdlname = "fa0 or_cout" *)
  wire \fa0.or_cout ;
  (* hdlname = "fa0 pt0" *)
  wire \fa0.pt0 ;
  (* hdlname = "fa0 pt1" *)
  wire \fa0.pt1 ;
  (* hdlname = "fa0 pt2" *)
  wire \fa0.pt2 ;
  (* hdlname = "fa0 pt3" *)
  wire \fa0.pt3 ;
  (* hdlname = "fa0 pt4" *)
  wire \fa0.pt4 ;
  (* hdlname = "fa1 A" *)
  wire \fa1.A ;
  (* hdlname = "fa1 B" *)
  wire \fa1.B ;
  (* hdlname = "fa1 Cin" *)
  wire \fa1.Cin ;
  (* hdlname = "fa1 Cout" *)
  wire \fa1.Cout ;
  (* hdlname = "fa1 S" *)
  wire \fa1.S ;
  (* hdlname = "fa1 or_add" *)
  wire \fa1.or_add ;
  (* hdlname = "fa1 or_cout" *)
  wire \fa1.or_cout ;
  (* hdlname = "fa1 pt0" *)
  wire \fa1.pt0 ;
  (* hdlname = "fa1 pt1" *)
  wire \fa1.pt1 ;
  (* hdlname = "fa1 pt2" *)
  wire \fa1.pt2 ;
  (* hdlname = "fa1 pt3" *)
  wire \fa1.pt3 ;
  (* hdlname = "fa1 pt4" *)
  wire \fa1.pt4 ;
  (* hdlname = "fa2 A" *)
  wire \fa2.A ;
  (* hdlname = "fa2 B" *)
  wire \fa2.B ;
  (* hdlname = "fa2 Cin" *)
  wire \fa2.Cin ;
  (* hdlname = "fa2 Cout" *)
  wire \fa2.Cout ;
  (* hdlname = "fa2 S" *)
  wire \fa2.S ;
  (* hdlname = "fa2 or_add" *)
  wire \fa2.or_add ;
  (* hdlname = "fa2 or_cout" *)
  wire \fa2.or_cout ;
  (* hdlname = "fa2 pt0" *)
  wire \fa2.pt0 ;
  (* hdlname = "fa2 pt1" *)
  wire \fa2.pt1 ;
  (* hdlname = "fa2 pt2" *)
  wire \fa2.pt2 ;
  (* hdlname = "fa2 pt3" *)
  wire \fa2.pt3 ;
  (* hdlname = "fa2 pt4" *)
  wire \fa2.pt4 ;
  (* hdlname = "fa3 A" *)
  wire \fa3.A ;
  (* hdlname = "fa3 B" *)
  wire \fa3.B ;
  (* hdlname = "fa3 Cin" *)
  wire \fa3.Cin ;
  (* hdlname = "fa3 Cout" *)
  wire \fa3.Cout ;
  (* hdlname = "fa3 S" *)
  wire \fa3.S ;
  (* hdlname = "fa3 or_add" *)
  wire \fa3.or_add ;
  (* hdlname = "fa3 or_cout" *)
  wire \fa3.or_cout ;
  (* hdlname = "fa3 pt0" *)
  wire \fa3.pt0 ;
  (* hdlname = "fa3 pt1" *)
  wire \fa3.pt1 ;
  (* hdlname = "fa3 pt2" *)
  wire \fa3.pt2 ;
  (* hdlname = "fa3 pt3" *)
  wire \fa3.pt3 ;
  (* hdlname = "fa3 pt4" *)
  wire \fa3.pt4 ;
  (* hdlname = "fa4 A" *)
  wire \fa4.A ;
  (* hdlname = "fa4 B" *)
  wire \fa4.B ;
  (* hdlname = "fa4 Cin" *)
  wire \fa4.Cin ;
  (* hdlname = "fa4 Cout" *)
  wire \fa4.Cout ;
  (* hdlname = "fa4 S" *)
  wire \fa4.S ;
  (* hdlname = "fa4 or_add" *)
  wire \fa4.or_add ;
  (* hdlname = "fa4 or_cout" *)
  wire \fa4.or_cout ;
  (* hdlname = "fa4 pt0" *)
  wire \fa4.pt0 ;
  (* hdlname = "fa4 pt1" *)
  wire \fa4.pt1 ;
  (* hdlname = "fa4 pt2" *)
  wire \fa4.pt2 ;
  (* hdlname = "fa4 pt3" *)
  wire \fa4.pt3 ;
  (* hdlname = "fa4 pt4" *)
  wire \fa4.pt4 ;
  (* hdlname = "fa5 A" *)
  wire \fa5.A ;
  (* hdlname = "fa5 B" *)
  wire \fa5.B ;
  (* hdlname = "fa5 Cin" *)
  wire \fa5.Cin ;
  (* hdlname = "fa5 Cout" *)
  wire \fa5.Cout ;
  (* hdlname = "fa5 S" *)
  wire \fa5.S ;
  (* hdlname = "fa5 or_add" *)
  wire \fa5.or_add ;
  (* hdlname = "fa5 or_cout" *)
  wire \fa5.or_cout ;
  (* hdlname = "fa5 pt0" *)
  wire \fa5.pt0 ;
  (* hdlname = "fa5 pt1" *)
  wire \fa5.pt1 ;
  (* hdlname = "fa5 pt2" *)
  wire \fa5.pt2 ;
  (* hdlname = "fa5 pt3" *)
  wire \fa5.pt3 ;
  (* hdlname = "fa5 pt4" *)
  wire \fa5.pt4 ;
  (* hdlname = "fa6 A" *)
  wire \fa6.A ;
  (* hdlname = "fa6 B" *)
  wire \fa6.B ;
  (* hdlname = "fa6 Cin" *)
  wire \fa6.Cin ;
  (* hdlname = "fa6 Cout" *)
  wire \fa6.Cout ;
  (* hdlname = "fa6 S" *)
  wire \fa6.S ;
  (* hdlname = "fa6 or_add" *)
  wire \fa6.or_add ;
  (* hdlname = "fa6 or_cout" *)
  wire \fa6.or_cout ;
  (* hdlname = "fa6 pt0" *)
  wire \fa6.pt0 ;
  (* hdlname = "fa6 pt1" *)
  wire \fa6.pt1 ;
  (* hdlname = "fa6 pt2" *)
  wire \fa6.pt2 ;
  (* hdlname = "fa6 pt3" *)
  wire \fa6.pt3 ;
  (* hdlname = "fa6 pt4" *)
  wire \fa6.pt4 ;
  (* hdlname = "fa7 A" *)
  wire \fa7.A ;
  (* hdlname = "fa7 B" *)
  wire \fa7.B ;
  (* hdlname = "fa7 Cin" *)
  wire \fa7.Cin ;
  (* hdlname = "fa7 Cout" *)
  wire \fa7.Cout ;
  (* hdlname = "fa7 S" *)
  wire \fa7.S ;
  (* hdlname = "fa7 or_add" *)
  wire \fa7.or_add ;
  (* hdlname = "fa7 or_cout" *)
  wire \fa7.or_cout ;
  (* hdlname = "fa7 pt0" *)
  wire \fa7.pt0 ;
  (* hdlname = "fa7 pt1" *)
  wire \fa7.pt1 ;
  (* hdlname = "fa7 pt2" *)
  wire \fa7.pt2 ;
  (* hdlname = "fa7 pt3" *)
  wire \fa7.pt3 ;
  (* hdlname = "fa7 pt4" *)
  wire \fa7.pt4 ;
  wire r0;
  wire r1;
  wire r2;
  wire r3;
  wire r4;
  wire r5;
  wire r6;
  wire r7;
  output s0;
  wire s0;
  output s1;
  wire s1;
  output s2;
  wire s2;
  output s3;
  wire s3;
  output s4;
  wire s4;
  output s5;
  wire s5;
  output s6;
  wire s6;
  output s7;
  wire s7;
  output s8;
  wire s8;
  (* LOC = "FB1_1" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:35.30-35.32" *)
  IBUF _00_ (
    .I(a0),
    .O(\fa0.A )
  );
  (* LOC = "FB1_2" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:36.30-36.32" *)
  IBUF _01_ (
    .I(a1),
    .O(\fa1.A )
  );
  (* LOC = "FB1_3" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:37.30-37.32" *)
  IBUF _02_ (
    .I(a2),
    .O(\fa2.A )
  );
  (* LOC = "FB1_4" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:38.30-38.32" *)
  IBUF _03_ (
    .I(a3),
    .O(\fa3.A )
  );
  (* LOC = "FB1_5" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:39.30-39.32" *)
  IBUF _04_ (
    .I(a4),
    .O(\fa4.A )
  );
  (* LOC = "FB1_6" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:40.30-40.32" *)
  IBUF _05_ (
    .I(a5),
    .O(\fa5.A )
  );
  (* LOC = "FB1_7" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:41.30-41.32" *)
  IBUF _06_ (
    .I(a6),
    .O(\fa6.A )
  );
  (* LOC = "FB1_8" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:42.30-42.32" *)
  IBUF _07_ (
    .I(a7),
    .O(\fa7.A )
  );
  (* LOC = "FB1_9" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:44.30-44.32" *)
  IBUF _08_ (
    .I(b0),
    .O(\fa0.B )
  );
  (* LOC = "FB1_10" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:45.31-45.33" *)
  IBUF _09_ (
    .I(b1),
    .O(\fa1.B )
  );
  (* LOC = "FB1_11" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:46.31-46.33" *)
  IBUF _10_ (
    .I(b2),
    .O(\fa2.B )
  );
  (* LOC = "FB1_12" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:47.31-47.33" *)
  IBUF _11_ (
    .I(b3),
    .O(\fa3.B )
  );
  (* LOC = "FB1_13" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:48.31-48.33" *)
  IBUF _12_ (
    .I(b4),
    .O(\fa4.B )
  );
  (* LOC = "FB1_14" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:49.31-49.33" *)
  IBUF _13_ (
    .I(b5),
    .O(\fa5.B )
  );
  (* LOC = "FB1_15" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:50.31-50.33" *)
  IBUF _14_ (
    .I(b6),
    .O(\fa6.B )
  );
  (* LOC = "FB1_16" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:51.31-51.33" *)
  IBUF _15_ (
    .I(b7),
    .O(\fa7.B )
  );
  (* LOC = "FB3_1" *)
  (* keep = 32'd1 *)
  (* src = "adder-fa.v:53.30-53.32" *)
  IBUF _16_ (
    .I(c0),
    .O(\fa0.Cin )
  );
  (* hdlname = "fa0 mc_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:55.9-55.11" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa0.mc_add  (
    .IN_ORTERM(\fa0.or_add ),
    .OUT(\fa0.S )
  );
  (* hdlname = "fa0 mc_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:59.11-59.59|adder-fa.v:3.54-3.57" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa0.mc_cry  (
    .IN_ORTERM(\fa0.or_cout ),
    .OUT(\fa0.Cout )
  );
  (* hdlname = "fa0 ot_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:58.11-58.59|adder-fa.v:12.27-12.33" *)
  ORTERM #(
    .WIDTH(32'sd4)
  ) \fa0.ot_add  (
    .IN({ \fa0.pt0 , \fa0.pt1 , \fa0.pt3 , \fa0.pt4  }),
    .OUT(\fa0.or_add )
  );
  (* hdlname = "fa0 ot_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:58.11-58.59|adder-fa.v:11.27-11.34" *)
  ORTERM #(
    .WIDTH(32'sd3)
  ) \fa0.ot_cry  (
    .IN({ \fa0.pt0 , \fa0.pt1 , \fa0.pt2  }),
    .OUT(\fa0.or_cout )
  );
  (* hdlname = "fa0 pt_c0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:58.11-58.59|adder-fa.v:10.27-10.30" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa0.pt_c0  (
    .IN({ \fa0.A , \fa0.Cin  }),
    .IN_B(\fa0.B ),
    .OUT(\fa0.pt0 )
  );
  (* hdlname = "fa0 pt_c1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:58.11-58.59|adder-fa.v:10.32-10.35" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa0.pt_c1  (
    .IN({ \fa0.B , \fa0.Cin  }),
    .IN_B(\fa0.A ),
    .OUT(\fa0.pt1 )
  );
  (* hdlname = "fa0 pt_c2" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:58.11-58.59|adder-fa.v:10.37-10.40" *)
  ANDTERM #(
    .COMP_INP(32'sd0),
    .TRUE_INP(32'sd2)
  ) \fa0.pt_c2  (
    .IN({ \fa0.A , \fa0.B  }),
    .OUT(\fa0.pt2 )
  );
  (* hdlname = "fa0 pt_x0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:58.11-58.59|adder-fa.v:10.42-10.45" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa0.pt_x0  (
    .IN({ \fa0.A , \fa0.B  }),
    .IN_B(\fa0.Cin ),
    .OUT(\fa0.pt3 )
  );
  (* hdlname = "fa0 pt_x1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:58.11-58.59|adder-fa.v:10.47-10.50" *)
  ANDTERM #(
    .COMP_INP(32'sd3),
    .TRUE_INP(32'sd0)
  ) \fa0.pt_x1  (
    .IN_B({ \fa0.A , \fa0.B , \fa0.Cin  }),
    .OUT(\fa0.pt4 )
  );
  (* hdlname = "fa1 mc_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:55.13-55.15" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa1.mc_add  (
    .IN_ORTERM(\fa1.or_add ),
    .OUT(\fa1.S )
  );
  (* hdlname = "fa1 mc_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:60.11-60.59|adder-fa.v:3.54-3.57" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa1.mc_cry  (
    .IN_ORTERM(\fa1.or_cout ),
    .OUT(\fa1.Cout )
  );
  (* hdlname = "fa1 ot_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:59.11-59.59|adder-fa.v:12.27-12.33" *)
  ORTERM #(
    .WIDTH(32'sd4)
  ) \fa1.ot_add  (
    .IN({ \fa1.pt0 , \fa1.pt1 , \fa1.pt3 , \fa1.pt4  }),
    .OUT(\fa1.or_add )
  );
  (* hdlname = "fa1 ot_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:59.11-59.59|adder-fa.v:11.27-11.34" *)
  ORTERM #(
    .WIDTH(32'sd3)
  ) \fa1.ot_cry  (
    .IN({ \fa1.pt0 , \fa1.pt1 , \fa1.pt2  }),
    .OUT(\fa1.or_cout )
  );
  (* hdlname = "fa1 pt_c0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:59.11-59.59|adder-fa.v:10.27-10.30" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa1.pt_c0  (
    .IN({ \fa1.A , \fa0.Cout  }),
    .IN_B(\fa1.B ),
    .OUT(\fa1.pt0 )
  );
  (* hdlname = "fa1 pt_c1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:59.11-59.59|adder-fa.v:10.32-10.35" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa1.pt_c1  (
    .IN({ \fa1.B , \fa0.Cout  }),
    .IN_B(\fa1.A ),
    .OUT(\fa1.pt1 )
  );
  (* hdlname = "fa1 pt_c2" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:59.11-59.59|adder-fa.v:10.37-10.40" *)
  ANDTERM #(
    .COMP_INP(32'sd0),
    .TRUE_INP(32'sd2)
  ) \fa1.pt_c2  (
    .IN({ \fa1.A , \fa1.B  }),
    .OUT(\fa1.pt2 )
  );
  (* hdlname = "fa1 pt_x0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:59.11-59.59|adder-fa.v:10.42-10.45" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa1.pt_x0  (
    .IN({ \fa1.A , \fa1.B  }),
    .IN_B(\fa0.Cout ),
    .OUT(\fa1.pt3 )
  );
  (* hdlname = "fa1 pt_x1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:59.11-59.59|adder-fa.v:10.47-10.50" *)
  ANDTERM #(
    .COMP_INP(32'sd3),
    .TRUE_INP(32'sd0)
  ) \fa1.pt_x1  (
    .IN_B({ \fa1.A , \fa1.B , \fa0.Cout  }),
    .OUT(\fa1.pt4 )
  );
  (* hdlname = "fa2 mc_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:55.17-55.19" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa2.mc_add  (
    .IN_ORTERM(\fa2.or_add ),
    .OUT(\fa2.S )
  );
  (* hdlname = "fa2 mc_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:61.11-61.59|adder-fa.v:3.54-3.57" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa2.mc_cry  (
    .IN_ORTERM(\fa2.or_cout ),
    .OUT(\fa2.Cout )
  );
  (* hdlname = "fa2 ot_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:60.11-60.59|adder-fa.v:12.27-12.33" *)
  ORTERM #(
    .WIDTH(32'sd4)
  ) \fa2.ot_add  (
    .IN({ \fa2.pt0 , \fa2.pt1 , \fa2.pt3 , \fa2.pt4  }),
    .OUT(\fa2.or_add )
  );
  (* hdlname = "fa2 ot_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:60.11-60.59|adder-fa.v:11.27-11.34" *)
  ORTERM #(
    .WIDTH(32'sd3)
  ) \fa2.ot_cry  (
    .IN({ \fa2.pt0 , \fa2.pt1 , \fa2.pt2  }),
    .OUT(\fa2.or_cout )
  );
  (* hdlname = "fa2 pt_c0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:60.11-60.59|adder-fa.v:10.27-10.30" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa2.pt_c0  (
    .IN({ \fa2.A , \fa1.Cout  }),
    .IN_B(\fa2.B ),
    .OUT(\fa2.pt0 )
  );
  (* hdlname = "fa2 pt_c1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:60.11-60.59|adder-fa.v:10.32-10.35" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa2.pt_c1  (
    .IN({ \fa2.B , \fa1.Cout  }),
    .IN_B(\fa2.A ),
    .OUT(\fa2.pt1 )
  );
  (* hdlname = "fa2 pt_c2" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:60.11-60.59|adder-fa.v:10.37-10.40" *)
  ANDTERM #(
    .COMP_INP(32'sd0),
    .TRUE_INP(32'sd2)
  ) \fa2.pt_c2  (
    .IN({ \fa2.A , \fa2.B  }),
    .OUT(\fa2.pt2 )
  );
  (* hdlname = "fa2 pt_x0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:60.11-60.59|adder-fa.v:10.42-10.45" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa2.pt_x0  (
    .IN({ \fa2.A , \fa2.B  }),
    .IN_B(\fa1.Cout ),
    .OUT(\fa2.pt3 )
  );
  (* hdlname = "fa2 pt_x1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:60.11-60.59|adder-fa.v:10.47-10.50" *)
  ANDTERM #(
    .COMP_INP(32'sd3),
    .TRUE_INP(32'sd0)
  ) \fa2.pt_x1  (
    .IN_B({ \fa2.A , \fa2.B , \fa1.Cout  }),
    .OUT(\fa2.pt4 )
  );
  (* hdlname = "fa3 mc_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:55.21-55.23" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa3.mc_add  (
    .IN_ORTERM(\fa3.or_add ),
    .OUT(\fa3.S )
  );
  (* hdlname = "fa3 mc_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:63.11-63.59|adder-fa.v:3.54-3.57" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa3.mc_cry  (
    .IN_ORTERM(\fa3.or_cout ),
    .OUT(\fa3.Cout )
  );
  (* hdlname = "fa3 ot_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:61.11-61.59|adder-fa.v:12.27-12.33" *)
  ORTERM #(
    .WIDTH(32'sd4)
  ) \fa3.ot_add  (
    .IN({ \fa3.pt0 , \fa3.pt1 , \fa3.pt3 , \fa3.pt4  }),
    .OUT(\fa3.or_add )
  );
  (* hdlname = "fa3 ot_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:61.11-61.59|adder-fa.v:11.27-11.34" *)
  ORTERM #(
    .WIDTH(32'sd3)
  ) \fa3.ot_cry  (
    .IN({ \fa3.pt0 , \fa3.pt1 , \fa3.pt2  }),
    .OUT(\fa3.or_cout )
  );
  (* hdlname = "fa3 pt_c0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:61.11-61.59|adder-fa.v:10.27-10.30" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa3.pt_c0  (
    .IN({ \fa3.A , \fa2.Cout  }),
    .IN_B(\fa3.B ),
    .OUT(\fa3.pt0 )
  );
  (* hdlname = "fa3 pt_c1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:61.11-61.59|adder-fa.v:10.32-10.35" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa3.pt_c1  (
    .IN({ \fa3.B , \fa2.Cout  }),
    .IN_B(\fa3.A ),
    .OUT(\fa3.pt1 )
  );
  (* hdlname = "fa3 pt_c2" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:61.11-61.59|adder-fa.v:10.37-10.40" *)
  ANDTERM #(
    .COMP_INP(32'sd0),
    .TRUE_INP(32'sd2)
  ) \fa3.pt_c2  (
    .IN({ \fa3.A , \fa3.B  }),
    .OUT(\fa3.pt2 )
  );
  (* hdlname = "fa3 pt_x0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:61.11-61.59|adder-fa.v:10.42-10.45" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa3.pt_x0  (
    .IN({ \fa3.A , \fa3.B  }),
    .IN_B(\fa2.Cout ),
    .OUT(\fa3.pt3 )
  );
  (* hdlname = "fa3 pt_x1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:61.11-61.59|adder-fa.v:10.47-10.50" *)
  ANDTERM #(
    .COMP_INP(32'sd3),
    .TRUE_INP(32'sd0)
  ) \fa3.pt_x1  (
    .IN_B({ \fa3.A , \fa3.B , \fa2.Cout  }),
    .OUT(\fa3.pt4 )
  );
  (* hdlname = "fa4 mc_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:55.25-55.27" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa4.mc_add  (
    .IN_ORTERM(\fa4.or_add ),
    .OUT(\fa4.S )
  );
  (* hdlname = "fa4 mc_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:64.11-64.59|adder-fa.v:3.54-3.57" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa4.mc_cry  (
    .IN_ORTERM(\fa4.or_cout ),
    .OUT(\fa4.Cout )
  );
  (* hdlname = "fa4 ot_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:63.11-63.59|adder-fa.v:12.27-12.33" *)
  ORTERM #(
    .WIDTH(32'sd4)
  ) \fa4.ot_add  (
    .IN({ \fa4.pt0 , \fa4.pt1 , \fa4.pt3 , \fa4.pt4  }),
    .OUT(\fa4.or_add )
  );
  (* hdlname = "fa4 ot_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:63.11-63.59|adder-fa.v:11.27-11.34" *)
  ORTERM #(
    .WIDTH(32'sd3)
  ) \fa4.ot_cry  (
    .IN({ \fa4.pt0 , \fa4.pt1 , \fa4.pt2  }),
    .OUT(\fa4.or_cout )
  );
  (* hdlname = "fa4 pt_c0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:63.11-63.59|adder-fa.v:10.27-10.30" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa4.pt_c0  (
    .IN({ \fa4.A , \fa3.Cout  }),
    .IN_B(\fa4.B ),
    .OUT(\fa4.pt0 )
  );
  (* hdlname = "fa4 pt_c1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:63.11-63.59|adder-fa.v:10.32-10.35" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa4.pt_c1  (
    .IN({ \fa4.B , \fa3.Cout  }),
    .IN_B(\fa4.A ),
    .OUT(\fa4.pt1 )
  );
  (* hdlname = "fa4 pt_c2" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:63.11-63.59|adder-fa.v:10.37-10.40" *)
  ANDTERM #(
    .COMP_INP(32'sd0),
    .TRUE_INP(32'sd2)
  ) \fa4.pt_c2  (
    .IN({ \fa4.A , \fa4.B  }),
    .OUT(\fa4.pt2 )
  );
  (* hdlname = "fa4 pt_x0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:63.11-63.59|adder-fa.v:10.42-10.45" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa4.pt_x0  (
    .IN({ \fa4.A , \fa4.B  }),
    .IN_B(\fa3.Cout ),
    .OUT(\fa4.pt3 )
  );
  (* hdlname = "fa4 pt_x1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:63.11-63.59|adder-fa.v:10.47-10.50" *)
  ANDTERM #(
    .COMP_INP(32'sd3),
    .TRUE_INP(32'sd0)
  ) \fa4.pt_x1  (
    .IN_B({ \fa4.A , \fa4.B , \fa3.Cout  }),
    .OUT(\fa4.pt4 )
  );
  (* hdlname = "fa5 mc_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:55.29-55.31" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa5.mc_add  (
    .IN_ORTERM(\fa5.or_add ),
    .OUT(\fa5.S )
  );
  (* hdlname = "fa5 mc_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:65.11-65.59|adder-fa.v:3.54-3.57" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa5.mc_cry  (
    .IN_ORTERM(\fa5.or_cout ),
    .OUT(\fa5.Cout )
  );
  (* hdlname = "fa5 ot_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:64.11-64.59|adder-fa.v:12.27-12.33" *)
  ORTERM #(
    .WIDTH(32'sd4)
  ) \fa5.ot_add  (
    .IN({ \fa5.pt0 , \fa5.pt1 , \fa5.pt3 , \fa5.pt4  }),
    .OUT(\fa5.or_add )
  );
  (* hdlname = "fa5 ot_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:64.11-64.59|adder-fa.v:11.27-11.34" *)
  ORTERM #(
    .WIDTH(32'sd3)
  ) \fa5.ot_cry  (
    .IN({ \fa5.pt0 , \fa5.pt1 , \fa5.pt2  }),
    .OUT(\fa5.or_cout )
  );
  (* hdlname = "fa5 pt_c0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:64.11-64.59|adder-fa.v:10.27-10.30" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa5.pt_c0  (
    .IN({ \fa5.A , \fa4.Cout  }),
    .IN_B(\fa5.B ),
    .OUT(\fa5.pt0 )
  );
  (* hdlname = "fa5 pt_c1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:64.11-64.59|adder-fa.v:10.32-10.35" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa5.pt_c1  (
    .IN({ \fa5.B , \fa4.Cout  }),
    .IN_B(\fa5.A ),
    .OUT(\fa5.pt1 )
  );
  (* hdlname = "fa5 pt_c2" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:64.11-64.59|adder-fa.v:10.37-10.40" *)
  ANDTERM #(
    .COMP_INP(32'sd0),
    .TRUE_INP(32'sd2)
  ) \fa5.pt_c2  (
    .IN({ \fa5.A , \fa5.B  }),
    .OUT(\fa5.pt2 )
  );
  (* hdlname = "fa5 pt_x0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:64.11-64.59|adder-fa.v:10.42-10.45" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa5.pt_x0  (
    .IN({ \fa5.A , \fa5.B  }),
    .IN_B(\fa4.Cout ),
    .OUT(\fa5.pt3 )
  );
  (* hdlname = "fa5 pt_x1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:64.11-64.59|adder-fa.v:10.47-10.50" *)
  ANDTERM #(
    .COMP_INP(32'sd3),
    .TRUE_INP(32'sd0)
  ) \fa5.pt_x1  (
    .IN_B({ \fa5.A , \fa5.B , \fa4.Cout  }),
    .OUT(\fa5.pt4 )
  );
  (* hdlname = "fa6 mc_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:55.33-55.35" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa6.mc_add  (
    .IN_ORTERM(\fa6.or_add ),
    .OUT(\fa6.S )
  );
  (* hdlname = "fa6 mc_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:66.11-66.59|adder-fa.v:3.54-3.57" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa6.mc_cry  (
    .IN_ORTERM(\fa6.or_cout ),
    .OUT(\fa6.Cout )
  );
  (* hdlname = "fa6 ot_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:65.11-65.59|adder-fa.v:12.27-12.33" *)
  ORTERM #(
    .WIDTH(32'sd4)
  ) \fa6.ot_add  (
    .IN({ \fa6.pt0 , \fa6.pt1 , \fa6.pt3 , \fa6.pt4  }),
    .OUT(\fa6.or_add )
  );
  (* hdlname = "fa6 ot_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:65.11-65.59|adder-fa.v:11.27-11.34" *)
  ORTERM #(
    .WIDTH(32'sd3)
  ) \fa6.ot_cry  (
    .IN({ \fa6.pt0 , \fa6.pt1 , \fa6.pt2  }),
    .OUT(\fa6.or_cout )
  );
  (* hdlname = "fa6 pt_c0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:65.11-65.59|adder-fa.v:10.27-10.30" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa6.pt_c0  (
    .IN({ \fa6.A , \fa5.Cout  }),
    .IN_B(\fa6.B ),
    .OUT(\fa6.pt0 )
  );
  (* hdlname = "fa6 pt_c1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:65.11-65.59|adder-fa.v:10.32-10.35" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa6.pt_c1  (
    .IN({ \fa6.B , \fa5.Cout  }),
    .IN_B(\fa6.A ),
    .OUT(\fa6.pt1 )
  );
  (* hdlname = "fa6 pt_c2" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:65.11-65.59|adder-fa.v:10.37-10.40" *)
  ANDTERM #(
    .COMP_INP(32'sd0),
    .TRUE_INP(32'sd2)
  ) \fa6.pt_c2  (
    .IN({ \fa6.A , \fa6.B  }),
    .OUT(\fa6.pt2 )
  );
  (* hdlname = "fa6 pt_x0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:65.11-65.59|adder-fa.v:10.42-10.45" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa6.pt_x0  (
    .IN({ \fa6.A , \fa6.B  }),
    .IN_B(\fa5.Cout ),
    .OUT(\fa6.pt3 )
  );
  (* hdlname = "fa6 pt_x1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:65.11-65.59|adder-fa.v:10.47-10.50" *)
  ANDTERM #(
    .COMP_INP(32'sd3),
    .TRUE_INP(32'sd0)
  ) \fa6.pt_x1  (
    .IN_B({ \fa6.A , \fa6.B , \fa5.Cout  }),
    .OUT(\fa6.pt4 )
  );
  (* hdlname = "fa7 mc_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:55.37-55.39" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa7.mc_add  (
    .IN_ORTERM(\fa7.or_add ),
    .OUT(\fa7.S )
  );
  (* hdlname = "fa7 mc_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:66.11-66.59|adder-fa.v:4.42-4.46" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'sd0)
  ) \fa7.mc_cry  (
    .IN_ORTERM(\fa7.or_cout ),
    .OUT(\fa7.Cout )
  );
  (* hdlname = "fa7 ot_add" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:66.11-66.59|adder-fa.v:12.27-12.33" *)
  ORTERM #(
    .WIDTH(32'sd4)
  ) \fa7.ot_add  (
    .IN({ \fa7.pt0 , \fa7.pt1 , \fa7.pt3 , \fa7.pt4  }),
    .OUT(\fa7.or_add )
  );
  (* hdlname = "fa7 ot_cry" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:66.11-66.59|adder-fa.v:11.27-11.34" *)
  ORTERM #(
    .WIDTH(32'sd3)
  ) \fa7.ot_cry  (
    .IN({ \fa7.pt0 , \fa7.pt1 , \fa7.pt2  }),
    .OUT(\fa7.or_cout )
  );
  (* hdlname = "fa7 pt_c0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:66.11-66.59|adder-fa.v:10.27-10.30" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa7.pt_c0  (
    .IN({ \fa7.A , \fa6.Cout  }),
    .IN_B(\fa7.B ),
    .OUT(\fa7.pt0 )
  );
  (* hdlname = "fa7 pt_c1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:66.11-66.59|adder-fa.v:10.32-10.35" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa7.pt_c1  (
    .IN({ \fa7.B , \fa6.Cout  }),
    .IN_B(\fa7.A ),
    .OUT(\fa7.pt1 )
  );
  (* hdlname = "fa7 pt_c2" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:66.11-66.59|adder-fa.v:10.37-10.40" *)
  ANDTERM #(
    .COMP_INP(32'sd0),
    .TRUE_INP(32'sd2)
  ) \fa7.pt_c2  (
    .IN({ \fa7.A , \fa7.B  }),
    .OUT(\fa7.pt2 )
  );
  (* hdlname = "fa7 pt_x0" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:66.11-66.59|adder-fa.v:10.42-10.45" *)
  ANDTERM #(
    .COMP_INP(32'sd1),
    .TRUE_INP(32'sd2)
  ) \fa7.pt_x0  (
    .IN({ \fa7.A , \fa7.B  }),
    .IN_B(\fa6.Cout ),
    .OUT(\fa7.pt3 )
  );
  (* hdlname = "fa7 pt_x1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:66.11-66.59|adder-fa.v:10.47-10.50" *)
  ANDTERM #(
    .COMP_INP(32'sd3),
    .TRUE_INP(32'sd0)
  ) \fa7.pt_x1  (
    .IN_B({ \fa7.A , \fa7.B , \fa6.Cout  }),
    .OUT(\fa7.pt4 )
  );
  (* LOC = "FB2_1" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:33.11-33.13" *)
  OBUF o0 (
    .I(\fa0.S ),
    .O(s0)
  );
  (* LOC = "FB2_2" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:33.15-33.17" *)
  OBUF o1 (
    .I(\fa1.S ),
    .O(s1)
  );
  (* LOC = "FB2_3" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:33.19-33.21" *)
  OBUF o2 (
    .I(\fa2.S ),
    .O(s2)
  );
  (* LOC = "FB2_4" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:33.23-33.25" *)
  OBUF o3 (
    .I(\fa3.S ),
    .O(s3)
  );
  (* LOC = "FB2_5" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:33.27-33.29" *)
  OBUF o4 (
    .I(\fa4.S ),
    .O(s4)
  );
  (* LOC = "FB2_6" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:33.31-33.33" *)
  OBUF o5 (
    .I(\fa5.S ),
    .O(s5)
  );
  (* LOC = "FB2_7" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:33.35-33.37" *)
  OBUF o6 (
    .I(\fa6.S ),
    .O(s6)
  );
  (* LOC = "FB2_8" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:33.39-33.41" *)
  OBUF o7 (
    .I(\fa7.S ),
    .O(s7)
  );
  (* LOC = "FB2_9" *)
  (* module_not_derived = 32'd1 *)
  (* src = "adder-fa.v:33.43-33.45" *)
  OBUF oc (
    .I(\fa7.Cout ),
    .O(s8)
  );
  assign c1 = \fa0.Cout ;
  assign c2 = \fa1.Cout ;
  assign c3 = \fa2.Cout ;
  assign c4 = \fa3.Cout ;
  assign c5 = \fa4.Cout ;
  assign c6 = \fa5.Cout ;
  assign c7 = \fa6.Cout ;
  assign c8 = \fa7.Cout ;
  assign \fa1.Cin  = \fa0.Cout ;
  assign \fa2.Cin  = \fa1.Cout ;
  assign \fa3.Cin  = \fa2.Cout ;
  assign \fa4.Cin  = \fa3.Cout ;
  assign \fa5.Cin  = \fa4.Cout ;
  assign \fa6.Cin  = \fa5.Cout ;
  assign \fa7.Cin  = \fa6.Cout ;
  assign r0 = \fa0.S ;
  assign r1 = \fa1.S ;
  assign r2 = \fa2.S ;
  assign r3 = \fa3.S ;
  assign r4 = \fa4.S ;
  assign r5 = \fa5.S ;
  assign r6 = \fa6.S ;
  assign r7 = \fa7.S ;
endmodule
