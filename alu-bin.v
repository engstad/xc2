/* Generated by Yosys 0.22+57 (git sha1 518194fac, clang 14.0.0 -fPIC -Os) */

(* PART_SPEED = "6" *)
(* PART_PKG = "VQ44" *)
(* GLOBAL_TERM = "PULLUP" *)
(* PART_NAME = "XC2C32A" *)
module top(PAD_FB1_5, PAD_FB1_13, PAD_FB1_14, PAD_FB1_9, PAD_FB1_16, PAD_FB2_11, PAD_FB1_3, PAD_FB1_7, PAD_FB1_2, PAD_FB2_6, PAD_FB1_10, PAD_FB2_3, PAD_FB2_12, PAD_FB1_11, PAD_FB2_5, PAD_FB2_16, PAD_FB1_6, PAD_FB2_8, PAD_FB2_1, PAD_FB2_9, PAD_FB1_8
, PAD_FB2_10, PAD_FB2_15, PAD_FB2_2, INPAD, PAD_FB2_14, PAD_FB2_7, PAD_FB1_4, PAD_FB2_13, PAD_FB1_1, PAD_FB2_4, PAD_FB1_15, PAD_FB1_12);
  input INPAD;
  wire INPAD;
  input PAD_FB1_1;
  wire PAD_FB1_1;
  input PAD_FB1_10;
  wire PAD_FB1_10;
  input PAD_FB1_11;
  wire PAD_FB1_11;
  input PAD_FB1_12;
  wire PAD_FB1_12;
  input PAD_FB1_13;
  wire PAD_FB1_13;
  input PAD_FB1_14;
  wire PAD_FB1_14;
  input PAD_FB1_15;
  wire PAD_FB1_15;
  input PAD_FB1_16;
  wire PAD_FB1_16;
  input PAD_FB1_2;
  wire PAD_FB1_2;
  input PAD_FB1_3;
  wire PAD_FB1_3;
  input PAD_FB1_4;
  wire PAD_FB1_4;
  input PAD_FB1_5;
  wire PAD_FB1_5;
  input PAD_FB1_6;
  wire PAD_FB1_6;
  input PAD_FB1_7;
  wire PAD_FB1_7;
  input PAD_FB1_8;
  wire PAD_FB1_8;
  input PAD_FB1_9;
  wire PAD_FB1_9;
  inout PAD_FB2_1;
  wire PAD_FB2_1;
  input PAD_FB2_10;
  wire PAD_FB2_10;
  input PAD_FB2_11;
  wire PAD_FB2_11;
  input PAD_FB2_12;
  wire PAD_FB2_12;
  input PAD_FB2_13;
  wire PAD_FB2_13;
  input PAD_FB2_14;
  wire PAD_FB2_14;
  input PAD_FB2_15;
  wire PAD_FB2_15;
  input PAD_FB2_16;
  wire PAD_FB2_16;
  inout PAD_FB2_2;
  wire PAD_FB2_2;
  inout PAD_FB2_3;
  wire PAD_FB2_3;
  inout PAD_FB2_4;
  wire PAD_FB2_4;
  inout PAD_FB2_5;
  wire PAD_FB2_5;
  inout PAD_FB2_6;
  wire PAD_FB2_6;
  inout PAD_FB2_7;
  wire PAD_FB2_7;
  inout PAD_FB2_8;
  wire PAD_FB2_8;
  inout PAD_FB2_9;
  wire PAD_FB2_9;
  wire fb0_or0;
  wire fb0_or1;
  wire fb0_or10;
  wire fb0_or11;
  wire fb0_or12;
  wire fb0_or13;
  wire fb0_or14;
  wire fb0_or15;
  wire fb0_or2;
  wire fb0_or3;
  wire fb0_or4;
  wire fb0_or5;
  wire fb0_or6;
  wire fb0_or7;
  wire fb0_or8;
  wire fb0_or9;
  wire fb0_regout0;
  wire fb0_regout1;
  wire fb0_regout10;
  wire fb0_regout11;
  wire fb0_regout12;
  wire fb0_regout13;
  wire fb0_regout14;
  wire fb0_regout15;
  wire fb0_regout2;
  wire fb0_regout3;
  wire fb0_regout4;
  wire fb0_regout5;
  wire fb0_regout6;
  wire fb0_regout7;
  wire fb0_regout8;
  wire fb0_regout9;
  wire fb0_xor0;
  wire fb0_xor1;
  wire fb0_xor10;
  wire fb0_xor11;
  wire fb0_xor12;
  wire fb0_xor13;
  wire fb0_xor14;
  wire fb0_xor15;
  wire fb0_xor2;
  wire fb0_xor3;
  wire fb0_xor4;
  wire fb0_xor5;
  wire fb0_xor6;
  wire fb0_xor7;
  wire fb0_xor8;
  wire fb0_xor9;
  wire fb1_or0;
  wire fb1_or1;
  wire fb1_or10;
  wire fb1_or11;
  wire fb1_or12;
  wire fb1_or13;
  wire fb1_or14;
  wire fb1_or15;
  wire fb1_or2;
  wire fb1_or3;
  wire fb1_or4;
  wire fb1_or5;
  wire fb1_or6;
  wire fb1_or7;
  wire fb1_or8;
  wire fb1_or9;
  wire fb1_pterm0;
  wire fb1_pterm1;
  wire fb1_pterm10;
  wire fb1_pterm11;
  wire fb1_pterm12;
  wire fb1_pterm13;
  wire fb1_pterm14;
  wire fb1_pterm15;
  wire fb1_pterm16;
  wire fb1_pterm17;
  wire fb1_pterm18;
  wire fb1_pterm19;
  wire fb1_pterm2;
  wire fb1_pterm20;
  wire fb1_pterm21;
  wire fb1_pterm22;
  wire fb1_pterm23;
  wire fb1_pterm24;
  wire fb1_pterm25;
  wire fb1_pterm26;
  wire fb1_pterm27;
  wire fb1_pterm28;
  wire fb1_pterm29;
  wire fb1_pterm3;
  wire fb1_pterm30;
  wire fb1_pterm31;
  wire fb1_pterm32;
  wire fb1_pterm33;
  wire fb1_pterm34;
  wire fb1_pterm35;
  wire fb1_pterm36;
  wire fb1_pterm37;
  wire fb1_pterm38;
  wire fb1_pterm39;
  wire fb1_pterm4;
  wire fb1_pterm5;
  wire fb1_pterm6;
  wire fb1_pterm7;
  wire fb1_pterm8;
  wire fb1_pterm9;
  wire fb1_regout0;
  wire fb1_regout1;
  wire fb1_regout10;
  wire fb1_regout11;
  wire fb1_regout12;
  wire fb1_regout13;
  wire fb1_regout14;
  wire fb1_regout15;
  wire fb1_regout2;
  wire fb1_regout3;
  wire fb1_regout4;
  wire fb1_regout5;
  wire fb1_regout6;
  wire fb1_regout7;
  wire fb1_regout8;
  wire fb1_regout9;
  wire fb1_xor0;
  wire fb1_xor1;
  wire fb1_xor10;
  wire fb1_xor11;
  wire fb1_xor12;
  wire fb1_xor13;
  wire fb1_xor14;
  wire fb1_xor15;
  wire fb1_xor2;
  wire fb1_xor3;
  wire fb1_xor4;
  wire fb1_xor5;
  wire fb1_xor6;
  wire fb1_xor7;
  wire fb1_xor8;
  wire fb1_xor9;
  wire from_iob_0;
  wire from_iob_1;
  wire from_iob_10;
  wire from_iob_11;
  wire from_iob_12;
  wire from_iob_13;
  wire from_iob_14;
  wire from_iob_15;
  wire from_iob_16;
  wire from_iob_17;
  wire from_iob_18;
  wire from_iob_19;
  wire from_iob_2;
  wire from_iob_20;
  wire from_iob_21;
  wire from_iob_22;
  wire from_iob_23;
  wire from_iob_24;
  wire from_iob_3;
  wire from_iob_4;
  wire from_iob_5;
  wire from_iob_6;
  wire from_iob_7;
  wire from_iob_8;
  wire from_iob_9;
  wire from_ipad;
  wire gck_0;
  wire to_iob_0;
  wire to_iob_1;
  wire to_iob_10;
  wire to_iob_11;
  wire to_iob_12;
  wire to_iob_13;
  wire to_iob_14;
  wire to_iob_15;
  wire to_iob_16;
  wire to_iob_17;
  wire to_iob_18;
  wire to_iob_19;
  wire to_iob_2;
  wire to_iob_20;
  wire to_iob_21;
  wire to_iob_22;
  wire to_iob_23;
  wire to_iob_24;
  wire to_iob_25;
  wire to_iob_26;
  wire to_iob_27;
  wire to_iob_28;
  wire to_iob_29;
  wire to_iob_3;
  wire to_iob_30;
  wire to_iob_31;
  wire to_iob_4;
  wire to_iob_5;
  wire to_iob_6;
  wire to_iob_7;
  wire to_iob_8;
  wire to_iob_9;
  BUFG bufg_gck_0 (
    .I(1'h0),
    .O(gck_0)
  );
  (* LOC = "FB1_1" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate0 (
    .OUT(fb0_or0)
  );
  (* LOC = "FB1_2" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate1 (
    .OUT(fb0_or1)
  );
  (* LOC = "FB1_11" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate10 (
    .OUT(fb0_or10)
  );
  (* LOC = "FB1_12" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate11 (
    .OUT(fb0_or11)
  );
  (* LOC = "FB1_13" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate12 (
    .OUT(fb0_or12)
  );
  (* LOC = "FB1_14" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate13 (
    .OUT(fb0_or13)
  );
  (* LOC = "FB1_15" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate14 (
    .OUT(fb0_or14)
  );
  (* LOC = "FB1_16" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate15 (
    .OUT(fb0_or15)
  );
  (* LOC = "FB1_3" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate2 (
    .OUT(fb0_or2)
  );
  (* LOC = "FB1_4" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate3 (
    .OUT(fb0_or3)
  );
  (* LOC = "FB1_5" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate4 (
    .OUT(fb0_or4)
  );
  (* LOC = "FB1_6" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate5 (
    .OUT(fb0_or5)
  );
  (* LOC = "FB1_7" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate6 (
    .OUT(fb0_or6)
  );
  (* LOC = "FB1_8" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate7 (
    .OUT(fb0_or7)
  );
  (* LOC = "FB1_9" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate8 (
    .OUT(fb0_or8)
  );
  (* LOC = "FB1_10" *)
  ORTERM #(
    .WIDTH(32'd0)
  ) fb0_orgate9 (
    .OUT(fb0_or9)
  );
  (* LOC = "FB1_1" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg0 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor0),
    .PRE(1'h0),
    .Q(fb0_regout0)
  );
  (* LOC = "FB1_2" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg1 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor1),
    .PRE(1'h0),
    .Q(fb0_regout1)
  );
  (* LOC = "FB1_11" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg10 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor10),
    .PRE(1'h0),
    .Q(fb0_regout10)
  );
  (* LOC = "FB1_12" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg11 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor11),
    .PRE(1'h0),
    .Q(fb0_regout11)
  );
  (* LOC = "FB1_13" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg12 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor12),
    .PRE(1'h0),
    .Q(fb0_regout12)
  );
  (* LOC = "FB1_14" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg13 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor13),
    .PRE(1'h0),
    .Q(fb0_regout13)
  );
  (* LOC = "FB1_15" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg14 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor14),
    .PRE(1'h0),
    .Q(fb0_regout14)
  );
  (* LOC = "FB1_16" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg15 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor15),
    .PRE(1'h0),
    .Q(fb0_regout15)
  );
  (* LOC = "FB1_3" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg2 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor2),
    .PRE(1'h0),
    .Q(fb0_regout2)
  );
  (* LOC = "FB1_4" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg3 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor3),
    .PRE(1'h0),
    .Q(fb0_regout3)
  );
  (* LOC = "FB1_5" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg4 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor4),
    .PRE(1'h0),
    .Q(fb0_regout4)
  );
  (* LOC = "FB1_6" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg5 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor5),
    .PRE(1'h0),
    .Q(fb0_regout5)
  );
  (* LOC = "FB1_7" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg6 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor6),
    .PRE(1'h0),
    .Q(fb0_regout6)
  );
  (* LOC = "FB1_8" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg7 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor7),
    .PRE(1'h0),
    .Q(fb0_regout7)
  );
  (* LOC = "FB1_9" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg8 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor8),
    .PRE(1'h0),
    .Q(fb0_regout8)
  );
  (* LOC = "FB1_10" *)
  FDCP #(
    .INIT(32'd1)
  ) fb0_reg9 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb0_xor9),
    .PRE(1'h0),
    .Q(fb0_regout9)
  );
  (* LOC = "FB1_1" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate0 (
    .IN_ORTERM(fb0_or0),
    .IN_PTC(1'h0),
    .OUT(fb0_xor0)
  );
  (* LOC = "FB1_2" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate1 (
    .IN_ORTERM(fb0_or1),
    .IN_PTC(1'h0),
    .OUT(fb0_xor1)
  );
  (* LOC = "FB1_11" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate10 (
    .IN_ORTERM(fb0_or10),
    .IN_PTC(1'h0),
    .OUT(fb0_xor10)
  );
  (* LOC = "FB1_12" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate11 (
    .IN_ORTERM(fb0_or11),
    .IN_PTC(1'h0),
    .OUT(fb0_xor11)
  );
  (* LOC = "FB1_13" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate12 (
    .IN_ORTERM(fb0_or12),
    .IN_PTC(1'h0),
    .OUT(fb0_xor12)
  );
  (* LOC = "FB1_14" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate13 (
    .IN_ORTERM(fb0_or13),
    .IN_PTC(1'h0),
    .OUT(fb0_xor13)
  );
  (* LOC = "FB1_15" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate14 (
    .IN_ORTERM(fb0_or14),
    .IN_PTC(1'h0),
    .OUT(fb0_xor14)
  );
  (* LOC = "FB1_16" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate15 (
    .IN_ORTERM(fb0_or15),
    .IN_PTC(1'h0),
    .OUT(fb0_xor15)
  );
  (* LOC = "FB1_3" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate2 (
    .IN_ORTERM(fb0_or2),
    .IN_PTC(1'h0),
    .OUT(fb0_xor2)
  );
  (* LOC = "FB1_4" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate3 (
    .IN_ORTERM(fb0_or3),
    .IN_PTC(1'h0),
    .OUT(fb0_xor3)
  );
  (* LOC = "FB1_5" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate4 (
    .IN_ORTERM(fb0_or4),
    .IN_PTC(1'h0),
    .OUT(fb0_xor4)
  );
  (* LOC = "FB1_6" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate5 (
    .IN_ORTERM(fb0_or5),
    .IN_PTC(1'h0),
    .OUT(fb0_xor5)
  );
  (* LOC = "FB1_7" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate6 (
    .IN_ORTERM(fb0_or6),
    .IN_PTC(1'h0),
    .OUT(fb0_xor6)
  );
  (* LOC = "FB1_8" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate7 (
    .IN_ORTERM(fb0_or7),
    .IN_PTC(1'h0),
    .OUT(fb0_xor7)
  );
  (* LOC = "FB1_9" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate8 (
    .IN_ORTERM(fb0_or8),
    .IN_PTC(1'h0),
    .OUT(fb0_xor8)
  );
  (* LOC = "FB1_10" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb0_xorgate9 (
    .IN_ORTERM(fb0_or9),
    .IN_PTC(1'h0),
    .OUT(fb0_xor9)
  );
  (* LOC = "FB2_P0" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate0 (
    .IN({ from_iob_8, from_ipad }),
    .IN_B(from_iob_0),
    .OUT(fb1_pterm0)
  );
  (* LOC = "FB2_P1" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate1 (
    .IN({ from_ipad, from_iob_0 }),
    .IN_B(from_iob_8),
    .OUT(fb1_pterm1)
  );
  (* LOC = "FB2_P10" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate10 (
    .IN({ from_iob_13, fb1_xor13 }),
    .IN_B(from_iob_5),
    .OUT(fb1_pterm10)
  );
  (* LOC = "FB2_P11" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate11 (
    .IN({ fb1_xor13, from_iob_5 }),
    .IN_B(from_iob_13),
    .OUT(fb1_pterm11)
  );
  (* LOC = "FB2_P12" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate12 (
    .IN({ from_iob_14, fb1_xor14 }),
    .IN_B(from_iob_6),
    .OUT(fb1_pterm12)
  );
  (* LOC = "FB2_P13" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate13 (
    .IN({ from_iob_6, fb1_xor14 }),
    .IN_B(from_iob_14),
    .OUT(fb1_pterm13)
  );
  (* LOC = "FB2_P14" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate14 (
    .IN({ from_iob_15, fb1_xor15 }),
    .IN_B(from_iob_7),
    .OUT(fb1_pterm14)
  );
  (* LOC = "FB2_P15" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate15 (
    .IN({ from_iob_7, fb1_xor15 }),
    .IN_B(from_iob_15),
    .OUT(fb1_pterm15)
  );
  (* LOC = "FB2_P16" *)
  ANDTERM #(
    .COMP_INP(32'd3),
    .TRUE_INP(32'd0)
  ) fb1_andgate16 (
    .IN_B({ from_iob_8, from_ipad, from_iob_0 }),
    .OUT(fb1_pterm16)
  );
  (* LOC = "FB2_P17" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate17 (
    .IN({ from_iob_8, from_iob_0 }),
    .IN_B(from_ipad),
    .OUT(fb1_pterm17)
  );
  (* LOC = "FB2_P18" *)
  ANDTERM #(
    .COMP_INP(32'd3),
    .TRUE_INP(32'd0)
  ) fb1_andgate18 (
    .IN_B({ fb1_xor9, from_iob_9, from_iob_1 }),
    .OUT(fb1_pterm18)
  );
  (* LOC = "FB2_P19" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate19 (
    .IN({ from_iob_9, from_iob_1 }),
    .IN_B(fb1_xor9),
    .OUT(fb1_pterm19)
  );
  (* LOC = "FB2_P2" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate2 (
    .IN({ fb1_xor9, from_iob_9 }),
    .IN_B(from_iob_1),
    .OUT(fb1_pterm2)
  );
  (* LOC = "FB2_P20" *)
  ANDTERM #(
    .COMP_INP(32'd3),
    .TRUE_INP(32'd0)
  ) fb1_andgate20 (
    .IN_B({ from_iob_10, fb1_xor10, from_iob_2 }),
    .OUT(fb1_pterm20)
  );
  (* LOC = "FB2_P21" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate21 (
    .IN({ from_iob_10, from_iob_2 }),
    .IN_B(fb1_xor10),
    .OUT(fb1_pterm21)
  );
  (* LOC = "FB2_P22" *)
  ANDTERM #(
    .COMP_INP(32'd3),
    .TRUE_INP(32'd0)
  ) fb1_andgate22 (
    .IN_B({ fb1_xor11, from_iob_11, from_iob_3 }),
    .OUT(fb1_pterm22)
  );
  (* LOC = "FB2_P23" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate23 (
    .IN({ from_iob_11, from_iob_3 }),
    .IN_B(fb1_xor11),
    .OUT(fb1_pterm23)
  );
  (* LOC = "FB2_P24" *)
  ANDTERM #(
    .COMP_INP(32'd3),
    .TRUE_INP(32'd0)
  ) fb1_andgate24 (
    .IN_B({ from_iob_4, fb1_xor12, from_iob_12 }),
    .OUT(fb1_pterm24)
  );
  (* LOC = "FB2_P25" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate25 (
    .IN({ from_iob_4, from_iob_12 }),
    .IN_B(fb1_xor12),
    .OUT(fb1_pterm25)
  );
  (* LOC = "FB2_P26" *)
  ANDTERM #(
    .COMP_INP(32'd3),
    .TRUE_INP(32'd0)
  ) fb1_andgate26 (
    .IN_B({ from_iob_13, fb1_xor13, from_iob_5 }),
    .OUT(fb1_pterm26)
  );
  (* LOC = "FB2_P27" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate27 (
    .IN({ from_iob_13, from_iob_5 }),
    .IN_B(fb1_xor13),
    .OUT(fb1_pterm27)
  );
  (* LOC = "FB2_P28" *)
  ANDTERM #(
    .COMP_INP(32'd3),
    .TRUE_INP(32'd0)
  ) fb1_andgate28 (
    .IN_B({ from_iob_6, from_iob_14, fb1_xor14 }),
    .OUT(fb1_pterm28)
  );
  (* LOC = "FB2_P29" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate29 (
    .IN({ from_iob_6, from_iob_14 }),
    .IN_B(fb1_xor14),
    .OUT(fb1_pterm29)
  );
  (* LOC = "FB2_P3" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate3 (
    .IN({ fb1_xor9, from_iob_1 }),
    .IN_B(from_iob_9),
    .OUT(fb1_pterm3)
  );
  (* LOC = "FB2_P30" *)
  ANDTERM #(
    .COMP_INP(32'd3),
    .TRUE_INP(32'd0)
  ) fb1_andgate30 (
    .IN_B({ from_iob_15, from_iob_7, fb1_xor15 }),
    .OUT(fb1_pterm30)
  );
  (* LOC = "FB2_P31" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate31 (
    .IN({ from_iob_15, from_iob_7 }),
    .IN_B(fb1_xor15),
    .OUT(fb1_pterm31)
  );
  (* LOC = "FB2_P32" *)
  ANDTERM #(
    .COMP_INP(32'd0),
    .TRUE_INP(32'd2)
  ) fb1_andgate32 (
    .IN({ from_iob_15, from_iob_7 }),
    .OUT(fb1_pterm32)
  );
  (* LOC = "FB2_P33" *)
  ANDTERM #(
    .COMP_INP(32'd0),
    .TRUE_INP(32'd2)
  ) fb1_andgate33 (
    .IN({ from_iob_8, from_iob_0 }),
    .OUT(fb1_pterm33)
  );
  (* LOC = "FB2_P34" *)
  ANDTERM #(
    .COMP_INP(32'd0),
    .TRUE_INP(32'd2)
  ) fb1_andgate34 (
    .IN({ from_iob_9, from_iob_1 }),
    .OUT(fb1_pterm34)
  );
  (* LOC = "FB2_P35" *)
  ANDTERM #(
    .COMP_INP(32'd0),
    .TRUE_INP(32'd2)
  ) fb1_andgate35 (
    .IN({ from_iob_10, from_iob_2 }),
    .OUT(fb1_pterm35)
  );
  (* LOC = "FB2_P36" *)
  ANDTERM #(
    .COMP_INP(32'd0),
    .TRUE_INP(32'd2)
  ) fb1_andgate36 (
    .IN({ from_iob_11, from_iob_3 }),
    .OUT(fb1_pterm36)
  );
  (* LOC = "FB2_P37" *)
  ANDTERM #(
    .COMP_INP(32'd0),
    .TRUE_INP(32'd2)
  ) fb1_andgate37 (
    .IN({ from_iob_4, from_iob_12 }),
    .OUT(fb1_pterm37)
  );
  (* LOC = "FB2_P38" *)
  ANDTERM #(
    .COMP_INP(32'd0),
    .TRUE_INP(32'd2)
  ) fb1_andgate38 (
    .IN({ from_iob_13, from_iob_5 }),
    .OUT(fb1_pterm38)
  );
  (* LOC = "FB2_P39" *)
  ANDTERM #(
    .COMP_INP(32'd0),
    .TRUE_INP(32'd2)
  ) fb1_andgate39 (
    .IN({ from_iob_6, from_iob_14 }),
    .OUT(fb1_pterm39)
  );
  (* LOC = "FB2_P4" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate4 (
    .IN({ from_iob_10, fb1_xor10 }),
    .IN_B(from_iob_2),
    .OUT(fb1_pterm4)
  );
  (* LOC = "FB2_P5" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate5 (
    .IN({ fb1_xor10, from_iob_2 }),
    .IN_B(from_iob_10),
    .OUT(fb1_pterm5)
  );
  (* LOC = "FB2_P6" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate6 (
    .IN({ fb1_xor11, from_iob_11 }),
    .IN_B(from_iob_3),
    .OUT(fb1_pterm6)
  );
  (* LOC = "FB2_P7" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate7 (
    .IN({ fb1_xor11, from_iob_3 }),
    .IN_B(from_iob_11),
    .OUT(fb1_pterm7)
  );
  (* LOC = "FB2_P8" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate8 (
    .IN({ fb1_xor12, from_iob_12 }),
    .IN_B(from_iob_4),
    .OUT(fb1_pterm8)
  );
  (* LOC = "FB2_P9" *)
  ANDTERM #(
    .COMP_INP(32'd1),
    .TRUE_INP(32'd2)
  ) fb1_andgate9 (
    .IN({ from_iob_4, fb1_xor12 }),
    .IN_B(from_iob_12),
    .OUT(fb1_pterm9)
  );
  (* LOC = "FB2_1" *)
  ORTERM #(
    .WIDTH(32'd4)
  ) fb1_orgate0 (
    .IN({ fb1_pterm17, fb1_pterm16, fb1_pterm1, fb1_pterm0 }),
    .OUT(fb1_or0)
  );
  (* LOC = "FB2_2" *)
  ORTERM #(
    .WIDTH(32'd4)
  ) fb1_orgate1 (
    .IN({ fb1_pterm19, fb1_pterm18, fb1_pterm3, fb1_pterm2 }),
    .OUT(fb1_or1)
  );
  (* LOC = "FB2_11" *)
  ORTERM #(
    .WIDTH(32'd3)
  ) fb1_orgate10 (
    .IN({ fb1_pterm34, fb1_pterm3, fb1_pterm2 }),
    .OUT(fb1_or10)
  );
  (* LOC = "FB2_12" *)
  ORTERM #(
    .WIDTH(32'd3)
  ) fb1_orgate11 (
    .IN({ fb1_pterm35, fb1_pterm5, fb1_pterm4 }),
    .OUT(fb1_or11)
  );
  (* LOC = "FB2_13" *)
  ORTERM #(
    .WIDTH(32'd3)
  ) fb1_orgate12 (
    .IN({ fb1_pterm36, fb1_pterm7, fb1_pterm6 }),
    .OUT(fb1_or12)
  );
  (* LOC = "FB2_14" *)
  ORTERM #(
    .WIDTH(32'd3)
  ) fb1_orgate13 (
    .IN({ fb1_pterm37, fb1_pterm9, fb1_pterm8 }),
    .OUT(fb1_or13)
  );
  (* LOC = "FB2_15" *)
  ORTERM #(
    .WIDTH(32'd3)
  ) fb1_orgate14 (
    .IN({ fb1_pterm38, fb1_pterm11, fb1_pterm10 }),
    .OUT(fb1_or14)
  );
  (* LOC = "FB2_16" *)
  ORTERM #(
    .WIDTH(32'd3)
  ) fb1_orgate15 (
    .IN({ fb1_pterm39, fb1_pterm13, fb1_pterm12 }),
    .OUT(fb1_or15)
  );
  (* LOC = "FB2_3" *)
  ORTERM #(
    .WIDTH(32'd4)
  ) fb1_orgate2 (
    .IN({ fb1_pterm21, fb1_pterm20, fb1_pterm5, fb1_pterm4 }),
    .OUT(fb1_or2)
  );
  (* LOC = "FB2_4" *)
  ORTERM #(
    .WIDTH(32'd4)
  ) fb1_orgate3 (
    .IN({ fb1_pterm23, fb1_pterm22, fb1_pterm7, fb1_pterm6 }),
    .OUT(fb1_or3)
  );
  (* LOC = "FB2_5" *)
  ORTERM #(
    .WIDTH(32'd4)
  ) fb1_orgate4 (
    .IN({ fb1_pterm25, fb1_pterm24, fb1_pterm9, fb1_pterm8 }),
    .OUT(fb1_or4)
  );
  (* LOC = "FB2_6" *)
  ORTERM #(
    .WIDTH(32'd4)
  ) fb1_orgate5 (
    .IN({ fb1_pterm27, fb1_pterm26, fb1_pterm11, fb1_pterm10 }),
    .OUT(fb1_or5)
  );
  (* LOC = "FB2_7" *)
  ORTERM #(
    .WIDTH(32'd4)
  ) fb1_orgate6 (
    .IN({ fb1_pterm29, fb1_pterm28, fb1_pterm13, fb1_pterm12 }),
    .OUT(fb1_or6)
  );
  (* LOC = "FB2_8" *)
  ORTERM #(
    .WIDTH(32'd4)
  ) fb1_orgate7 (
    .IN({ fb1_pterm31, fb1_pterm30, fb1_pterm15, fb1_pterm14 }),
    .OUT(fb1_or7)
  );
  (* LOC = "FB2_9" *)
  ORTERM #(
    .WIDTH(32'd3)
  ) fb1_orgate8 (
    .IN({ fb1_pterm32, fb1_pterm15, fb1_pterm14 }),
    .OUT(fb1_or8)
  );
  (* LOC = "FB2_10" *)
  ORTERM #(
    .WIDTH(32'd3)
  ) fb1_orgate9 (
    .IN({ fb1_pterm33, fb1_pterm1, fb1_pterm0 }),
    .OUT(fb1_or9)
  );
  (* LOC = "FB2_1" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg0 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor0),
    .PRE(1'h0),
    .Q(fb1_regout0)
  );
  (* LOC = "FB2_2" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg1 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor1),
    .PRE(1'h0),
    .Q(fb1_regout1)
  );
  (* LOC = "FB2_11" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg10 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor10),
    .PRE(1'h0),
    .Q(fb1_regout10)
  );
  (* LOC = "FB2_12" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg11 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor11),
    .PRE(1'h0),
    .Q(fb1_regout11)
  );
  (* LOC = "FB2_13" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg12 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor12),
    .PRE(1'h0),
    .Q(fb1_regout12)
  );
  (* LOC = "FB2_14" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg13 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor13),
    .PRE(1'h0),
    .Q(fb1_regout13)
  );
  (* LOC = "FB2_15" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg14 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor14),
    .PRE(1'h0),
    .Q(fb1_regout14)
  );
  (* LOC = "FB2_16" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg15 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor15),
    .PRE(1'h0),
    .Q(fb1_regout15)
  );
  (* LOC = "FB2_3" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg2 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor2),
    .PRE(1'h0),
    .Q(fb1_regout2)
  );
  (* LOC = "FB2_4" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg3 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor3),
    .PRE(1'h0),
    .Q(fb1_regout3)
  );
  (* LOC = "FB2_5" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg4 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor4),
    .PRE(1'h0),
    .Q(fb1_regout4)
  );
  (* LOC = "FB2_6" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg5 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor5),
    .PRE(1'h0),
    .Q(fb1_regout5)
  );
  (* LOC = "FB2_7" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg6 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor6),
    .PRE(1'h0),
    .Q(fb1_regout6)
  );
  (* LOC = "FB2_8" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg7 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor7),
    .PRE(1'h0),
    .Q(fb1_regout7)
  );
  (* LOC = "FB2_9" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg8 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor8),
    .PRE(1'h0),
    .Q(fb1_regout8)
  );
  (* LOC = "FB2_10" *)
  FDCP #(
    .INIT(32'd1)
  ) fb1_reg9 (
    .C(gck_0),
    .CLR(1'h0),
    .D(fb1_xor9),
    .PRE(1'h0),
    .Q(fb1_regout9)
  );
  (* LOC = "FB2_1" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate0 (
    .IN_ORTERM(fb1_or0),
    .IN_PTC(1'h0),
    .OUT(fb1_xor0)
  );
  (* LOC = "FB2_2" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate1 (
    .IN_ORTERM(fb1_or1),
    .IN_PTC(1'h0),
    .OUT(fb1_xor1)
  );
  (* LOC = "FB2_11" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate10 (
    .IN_ORTERM(fb1_or10),
    .IN_PTC(1'h0),
    .OUT(fb1_xor10)
  );
  (* LOC = "FB2_12" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate11 (
    .IN_ORTERM(fb1_or11),
    .IN_PTC(1'h0),
    .OUT(fb1_xor11)
  );
  (* LOC = "FB2_13" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate12 (
    .IN_ORTERM(fb1_or12),
    .IN_PTC(1'h0),
    .OUT(fb1_xor12)
  );
  (* LOC = "FB2_14" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate13 (
    .IN_ORTERM(fb1_or13),
    .IN_PTC(1'h0),
    .OUT(fb1_xor13)
  );
  (* LOC = "FB2_15" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate14 (
    .IN_ORTERM(fb1_or14),
    .IN_PTC(1'h0),
    .OUT(fb1_xor14)
  );
  (* LOC = "FB2_16" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate15 (
    .IN_ORTERM(fb1_or15),
    .IN_PTC(1'h0),
    .OUT(fb1_xor15)
  );
  (* LOC = "FB2_3" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate2 (
    .IN_ORTERM(fb1_or2),
    .IN_PTC(1'h0),
    .OUT(fb1_xor2)
  );
  (* LOC = "FB2_4" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate3 (
    .IN_ORTERM(fb1_or3),
    .IN_PTC(1'h0),
    .OUT(fb1_xor3)
  );
  (* LOC = "FB2_5" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate4 (
    .IN_ORTERM(fb1_or4),
    .IN_PTC(1'h0),
    .OUT(fb1_xor4)
  );
  (* LOC = "FB2_6" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate5 (
    .IN_ORTERM(fb1_or5),
    .IN_PTC(1'h0),
    .OUT(fb1_xor5)
  );
  (* LOC = "FB2_7" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate6 (
    .IN_ORTERM(fb1_or6),
    .IN_PTC(1'h0),
    .OUT(fb1_xor6)
  );
  (* LOC = "FB2_8" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate7 (
    .IN_ORTERM(fb1_or7),
    .IN_PTC(1'h0),
    .OUT(fb1_xor7)
  );
  (* LOC = "FB2_9" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate8 (
    .IN_ORTERM(fb1_or8),
    .IN_PTC(1'h0),
    .OUT(fb1_xor8)
  );
  (* LOC = "FB2_10" *)
  MACROCELL_XOR #(
    .INVERT_OUT(32'd0)
  ) fb1_xorgate9 (
    .IN_ORTERM(fb1_or9),
    .IN_PTC(1'h0),
    .OUT(fb1_xor9)
  );
  (* LOC = "FB1_1" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_0 (
    .I(PAD_FB1_1),
    .O(from_iob_0)
  );
  (* LOC = "FB1_2" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_1 (
    .I(PAD_FB1_2),
    .O(from_iob_1)
  );
  (* LOC = "FB1_11" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_10 (
    .I(PAD_FB1_11),
    .O(from_iob_10)
  );
  (* LOC = "FB1_12" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_11 (
    .I(PAD_FB1_12),
    .O(from_iob_11)
  );
  (* LOC = "FB1_13" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_12 (
    .I(PAD_FB1_13),
    .O(from_iob_12)
  );
  (* LOC = "FB1_14" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_13 (
    .I(PAD_FB1_14),
    .O(from_iob_13)
  );
  (* LOC = "FB1_15" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_14 (
    .I(PAD_FB1_15),
    .O(from_iob_14)
  );
  (* LOC = "FB1_16" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_15 (
    .I(PAD_FB1_16),
    .O(from_iob_15)
  );
  (* LOC = "FB2_1" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "SLOW" *)
  (* TERM = "FALSE" *)
  IOBUFE iob_16 (
    .E(1'h1),
    .I(fb1_xor0),
    .IO(PAD_FB2_1),
    .O(from_iob_16)
  );
  (* LOC = "FB2_2" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "SLOW" *)
  (* TERM = "FALSE" *)
  IOBUFE iob_17 (
    .E(1'h1),
    .I(fb1_xor1),
    .IO(PAD_FB2_2),
    .O(from_iob_17)
  );
  (* LOC = "FB2_3" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "SLOW" *)
  (* TERM = "FALSE" *)
  IOBUFE iob_18 (
    .E(1'h1),
    .I(fb1_xor2),
    .IO(PAD_FB2_3),
    .O(from_iob_18)
  );
  (* LOC = "FB2_4" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "SLOW" *)
  (* TERM = "FALSE" *)
  IOBUFE iob_19 (
    .E(1'h1),
    .I(fb1_xor3),
    .IO(PAD_FB2_4),
    .O(from_iob_19)
  );
  (* LOC = "FB1_3" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_2 (
    .I(PAD_FB1_3),
    .O(from_iob_2)
  );
  (* LOC = "FB2_5" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "SLOW" *)
  (* TERM = "FALSE" *)
  IOBUFE iob_20 (
    .E(1'h1),
    .I(fb1_xor4),
    .IO(PAD_FB2_5),
    .O(from_iob_20)
  );
  (* LOC = "FB2_6" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "SLOW" *)
  (* TERM = "FALSE" *)
  IOBUFE iob_21 (
    .E(1'h1),
    .I(fb1_xor5),
    .IO(PAD_FB2_6),
    .O(from_iob_21)
  );
  (* LOC = "FB2_7" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "SLOW" *)
  (* TERM = "FALSE" *)
  IOBUFE iob_22 (
    .E(1'h1),
    .I(fb1_xor6),
    .IO(PAD_FB2_7),
    .O(from_iob_22)
  );
  (* LOC = "FB2_8" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "SLOW" *)
  (* TERM = "FALSE" *)
  IOBUFE iob_23 (
    .E(1'h1),
    .I(fb1_xor7),
    .IO(PAD_FB2_8),
    .O(from_iob_23)
  );
  (* LOC = "FB2_9" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "SLOW" *)
  (* TERM = "FALSE" *)
  IOBUFE iob_24 (
    .E(1'h1),
    .I(fb1_xor8),
    .IO(PAD_FB2_9),
    .O(from_iob_24)
  );
  (* LOC = "FB1_4" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_3 (
    .I(PAD_FB1_4),
    .O(from_iob_3)
  );
  (* LOC = "FB1_5" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_4 (
    .I(PAD_FB1_5),
    .O(from_iob_4)
  );
  (* LOC = "FB1_6" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_5 (
    .I(PAD_FB1_6),
    .O(from_iob_5)
  );
  (* LOC = "FB1_7" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_6 (
    .I(PAD_FB1_7),
    .O(from_iob_6)
  );
  (* LOC = "FB1_8" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_7 (
    .I(PAD_FB1_8),
    .O(from_iob_7)
  );
  (* LOC = "FB1_9" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_8 (
    .I(PAD_FB1_9),
    .O(from_iob_8)
  );
  (* LOC = "FB1_10" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* SLEW = "FAST" *)
  (* TERM = "FALSE" *)
  IBUF iob_9 (
    .I(PAD_FB1_10),
    .O(from_iob_9)
  );
  (* LOC = "INPAD" *)
  (* SCHMITT_TRIGGER = "FALSE" *)
  (* TERM = "FALSE" *)
  IBUF ipad (
    .I(INPAD),
    .O(from_ipad)
  );
  assign to_iob_0 = fb0_xor0;
  assign to_iob_1 = fb0_xor1;
  assign to_iob_10 = fb0_xor10;
  assign to_iob_11 = fb0_xor11;
  assign to_iob_12 = fb0_xor12;
  assign to_iob_13 = fb0_xor13;
  assign to_iob_14 = fb0_xor14;
  assign to_iob_15 = fb0_xor15;
  assign to_iob_16 = fb1_xor0;
  assign to_iob_17 = fb1_xor1;
  assign to_iob_18 = fb1_xor2;
  assign to_iob_19 = fb1_xor3;
  assign to_iob_2 = fb0_xor2;
  assign to_iob_20 = fb1_xor4;
  assign to_iob_21 = fb1_xor5;
  assign to_iob_22 = fb1_xor6;
  assign to_iob_23 = fb1_xor7;
  assign to_iob_24 = fb1_xor8;
  assign to_iob_25 = fb1_xor9;
  assign to_iob_26 = fb1_xor10;
  assign to_iob_27 = fb1_xor11;
  assign to_iob_28 = fb1_xor12;
  assign to_iob_29 = fb1_xor13;
  assign to_iob_3 = fb0_xor3;
  assign to_iob_30 = fb1_xor14;
  assign to_iob_31 = fb1_xor15;
  assign to_iob_4 = fb0_xor4;
  assign to_iob_5 = fb0_xor5;
  assign to_iob_6 = fb0_xor6;
  assign to_iob_7 = fb0_xor7;
  assign to_iob_8 = fb0_xor8;
  assign to_iob_9 = fb0_xor9;
endmodule
